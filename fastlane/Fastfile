# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

ENV["SLACK_URL"]="https://hooks.slack.com/services/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"

default_platform(:ios)

platform :ios do
  desc "Just build the thing"
  lane :build do
    ionic(platform: "ios", prod: true)
    match(type: "appstore", readonly: true)
    build_app(
        export_method: "app-store",
        export_options: {
            provisioningProfiles: {
                "com.shinywhitebox.scheduler" => "match AppStore com.shinywhitebox.scheduler"
            }
        }
    )
  end
  lane :beta do
    ionic(platform: "ios", prod: true)
    match(type: "appstore", readonly: true)
    build_app(
        export_method: "app-store",
        export_options: {
            provisioningProfiles: {
                "com.shinywhitebox.scheduler" => "match AppStore com.shinywhitebox.scheduler"
            }
        }
    )
    upload_to_testflight
  end
end


desc "Upload the APK to Slack channel"
private_lane :upload_to_slack do |options|
  file_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  file_name = file_path.gsub(/\/.*\//,"")
  sh "echo Uploading " + file_name + " to Slack"
  sh "curl https://slack.com/api/files.upload -F token=\"xoxp-36167262595-36207234084-428594084545-2287fb045243196b7ed38e2f983beaad\" -F channels=\"#cunningplan\" -F title=\"" + file_name + "\" -F filename=\"" + file_name + "\" -F file=@" + file_path
end

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Build production release"
  lane :slackbuild do
    ionic(
        platform: "android",
        prod: false,
        keystore_path: '../scheduler-certs/google_play/android-release-key.jks',
        keystore_alias: 'my-alias',
        keystore_password: 'scheduler'
    )
    gradle(task: "clean assembleRelease", project_dir: "./platforms/android")
    upload_to_slack()
  end

  desc "Deploy new alpha"
  lane :alpha do
    ionic(
        platform: "android",
        prod: true,
        keystore_path: '../scheduler-certs/google_play/android-release-key.jks',
        keystore_alias: 'my-alias',
        keystore_password: 'scheduler'
    )
    gradle(task: "clean assembleRelease", project_dir: "./platforms/android")
    upload_to_play_store(track: 'alpha')
  end

  desc "Build production release"
  lane :build do
    ionic(
        platform: "android",
        prod: true,
        keystore_path: '../scheduler-certs/google_play/android-release-key.jks',
        keystore_alias: 'my-alias',
        keystore_password: 'scheduler'
    )
    gradle(task: "clean assembleRelease", project_dir: "./platforms/android")
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    ionic(
        platform: "android",
        prod: true,
        keystore_path: '../scheduler-certs/google_play/android-release-key.jks',
        keystore_alias: 'my-alias',
        keystore_password: 'scheduler'
    )
    gradle(task: "clean assembleRelease", project_dir: "./platforms/android")
    upload_to_play_store
  end
end
